from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
import asyncio
import requests
import re
import time

from telethon import TelegramClient, events
from data import config
from external.banker import Banker
from external.pycrystalpay import CrystalPay
from keyboards.default import all_back_to_main_default, check_user_out_func
from keyboards.inline import *
from loader import dp, bot
from states.state_payment import StorageQiwi, StorageCrystalPay
from utils import send_all_admin, clear_firstname, get_dates
from utils.db_api.sqlite import update_userx, get_refillx, add_refillx, get_crystal


@dp.callback_query_handler(text="user_input_payment", state="*")
async def input_payment(call: CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton(text="BTCBanker", callback_data="banker_paym"))
    await call.message.answer("<b>–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>",
                              reply_markup=markup)


@dp.callback_query_handler(text="banker_paym", state="*")
async def input_banker(call: CallbackQuery, state: FSMContext):
    await state.finish()
    await call.message.answer('–ü—Ä–∏—à–ª–∏—Ç–µ —Å—ã–ª–∫—É –Ω–∞ —á–µ–∫\n'
                              '–ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –ø—Ä–∏—à–ª–∏—Ç–µ —á–µ–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥')
    await state.set_state("get_banker")


@dp.message_handler(state="get_banker")
async def check_banker(message: types.Message, state: FSMContext):
    link = message.text
    if 'BTC_CHANGE_BOT?start=' in link:
        check_id = re.findall(r"https://telegram\.me/BTC_CHANGE_BOT\?start=(.*)", link)
        banker = Banker(config.api_id, config.api_hash)
        result = await banker.check_cheque(check_id[0])
        if result is not False:
            amount = result
            print(amount)
            add_refillx(message.from_user.id, message.from_user.username, message.from_user.first_name,
                                        link.split('start=')[1],
                                        amount, link.split('start=')[1], 'btc_banker', get_dates(), int(time.time()))
            get_user_info = get_userx(user_id=message.from_user.id)
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            update_userx(message.from_user.id,
                         balance=int(get_user_info[4]) + amount,
                         all_refill=int(get_user_info[5]) + amount)

            await message.answer(
                f"<b>‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É {amount}—Ä—É–±. –£–¥–∞—á–∏ ‚ù§</b>\n"
                f"<b>üìÉ –ß–µ–∫:</b> <code>+{link.split('start=')[1]}</code>",
                reply_markup=check_user_out_func(message.from_user.id))
            await send_all_admin(f"<b>üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> "
                                 f"(@{message.from_user.username}|<a href='tg://user?id={message.from_user.id}'>{message.from_user.first_name}</a>"
                                 f"|<code>{message.from_user.id}</code>) "
                                 f"<b>–ø–æ–ø–æ–ª–Ω–∏–ª –±–∞–ª–∞–Ω—Å –Ω–∞ —Å—É–º–º—É</b> <code>{amount}—Ä—É–±</code> ü•ù\n"
                                 f"üìÉ <b>–ß–µ–∫:</b> <code>+{link.split('start=')[1]}</code>")
            await state.finish()
        else:
            await message.answer('–ß–µ–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
    else:
        await message.answer('–°—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è')

