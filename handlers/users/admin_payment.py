# - *- coding: utf- 8 - *-
import asyncio
import json

import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from pyqiwip2p import QiwiP2P
from filters import IsAdmin
from keyboards.default import payment_default
from keyboards.inline import choice_way_input_payment_func
from loader import dp, bot
from states import StorageQiwi, StorageYooMoney, StorageCrystalPay
from utils import send_all_admin, clear_firstname
from utils.db_api.sqlite import get_paymentx, update_paymentx, edit_yoomoney, update_paymenty, update_paymentc, edit_crystal

from utils import yoomoney_auth, generate_token


###################################################################################
########################### –í–ö–õ–Æ–ß–ï–ù–ò–ï/–í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø #######################
# –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è qiwi", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è qiwi –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è  qiwi –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è qiwi", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è qiwi –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è qiwi –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymenty(status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymenty(status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)

@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è CrystalPay", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentc(status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è CrystalPay –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è CrystalPay", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentc(status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è CrystalPay –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è yoomoney –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


###################################################################################
############################# –í–´–ë–û–† –°–ü–û–°–û–ë–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø ############################
# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="change_payment:")
async def input_amount(call: CallbackQuery):
    way_pay = call.data[15:]
    change_pass = False
    get_payment = get_paymentx()
    if way_pay == "nickname":
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + get_payment[1]
            get_nickname = request.get(f"https://edge.qiwi.com/qw-nicknames/v1/persons/{get_payment[0]}/nickname")
            check_nickname = json.loads(get_nickname.text).get("nickname")
            if check_nickname is None:
                await call.answer("‚ùó –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç QIWI –ù–∏–∫–Ω–µ–π–º")
            else:
                update_paymentx(qiwi_nickname=check_nickname)
                change_pass = True
        except json.decoder.JSONDecodeError:
            await call.answer("‚ùó QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ", True)
    else:
        change_pass = True
    if change_pass:
        update_paymentx(way_payment=way_pay)
        await bot.edit_message_text("ü•ù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ\n"
                                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    "üî∏ <a href='https://vk.cc/bYjKGM'><b>–ü–æ —Ñ–æ—Ä–º–µ</b></a> - <code>–ì–æ—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã QIWI</code>\n"
                                    "üî∏ <a href='https://vk.cc/bYjKEy'><b>–ü–æ –Ω–æ–º–µ—Ä—É</b></a> - <code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n"
                                    "üî∏ <a href='https://vk.cc/bYjKJk'><b>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</b></a> - "
                                    "<code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)</code>",
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=choice_way_input_payment_func())


###################################################################################
####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="ü•ù –ò–∑–º–µ–Ω–∏—Ç—å QIWI üñç", state="*")
async def change_qiwi_login(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>–ª–æ–≥–∏–Ω(–Ω–æ–º–µ—Ä)</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞üñç </b>")
    await StorageQiwi.here_input_qiwi_login.set()


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ QIWI
@dp.message_handler(IsAdmin(), text="ü•ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI ‚ôª", state="*")
async def check_qiwi(message: types.Message, state: FSMContext):
    await state.finish()
    get_payments = get_paymentx()
    check_pass = True
    if get_payments[0] != "None" or get_payments[1] != "None" or get_payments[2] != "None":
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + get_payments[1]
            response_qiwi = request.get(f"https://edge.qiwi.com/payment-history/v2/persons/{get_payments[0]}/payments",
                                        params={"rows": 1, "operation": "IN"})
            if response_qiwi.status_code == 200:
                try:
                    qiwi = QiwiP2P(get_payments[2])
                    bill = qiwi.bill(amount=1, lifetime=1)
                except json.decoder.JSONDecodeError:
                    check_pass = False
            else:
                check_pass = False
        except json.decoder.JSONDecodeError:
            check_pass = False
        if check_pass:
            await message.answer(f"<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç ‚úÖ</b>\n"
                                 f"üë§ –õ–æ–≥–∏–Ω: <code>{get_payments[0]}</code>\n"
                                 f"‚ôª –¢–æ–∫–µ–Ω: <code>{get_payments[1]}</code>\n"
                                 f"üìç –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: <code>{get_payments[2]}</code>")
        else:
            await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                 "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ ‚ùó")
    else:
        await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</b>\n"
                             "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ‚ùó")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å Qiwi"
@dp.message_handler(IsAdmin(), text="ü•ù –ë–∞–ª–∞–Ω—Å QIWI üëÅ", state="*")
async def balance_qiwi(message: types.Message, state: FSMContext):
    await state.finish()
    get_payments = get_paymentx()
    if get_payments[0] != "None" or get_payments[1] != "None" or get_payments[2] != "None":
        request = requests.Session()
        request.headers["authorization"] = "Bearer " + get_payments[1]
        response_qiwi = request.get(f"https://edge.qiwi.com/funding-sources/v2/persons/{get_payments[0]}/accounts")
        if response_qiwi.status_code == 200:
            get_balance = response_qiwi.json()["accounts"][0]["balance"]["amount"]
            await message.answer(
                f"<b>ü•ù –ë–∞–ª–∞–Ω—Å QIWI –∫–æ—à–µ–ª—å–∫–∞</b> <code>{get_payments[0]}</code> <b>—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</b> <code>{get_balance} —Ä—É–±</code>")
        else:
            await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùå</b>\n"
                                 "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ ‚ùó")
    else:
        await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</b>\n"
                             "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ‚ùó")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_login)
async def change_key_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_qiwi_login"] = message.text
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>—Ç–æ–∫–µ–Ω API</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n"
                         "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
                         "‚ùï –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_qiwi_token.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_token)
async def change_secret_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_qiwi_token"] = message.text
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á üñç</code>\n"
                         "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/p2p-admin/transfers/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_qiwi_secret.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_secret)
async def change_secret_api(message: types.Message, state: FSMContext):
    secrey_key_error = False
    async with state.proxy() as data:
        qiwi_login = data["here_input_qiwi_login"]
        qiwi_token = data["here_input_qiwi_token"]
    qiwi_private_key = message.text
    delete_msg = await message.answer("<b>ü•ù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö... üîÑ</b>")
    await asyncio.sleep(0.5)
    try:
        qiwi = QiwiP2P(qiwi_private_key)
        bill = qiwi.bill(amount=1, lifetime=1)
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + qiwi_token
            check_history = request.get(f"https://edge.qiwi.com/payment-history/v2/persons/{qiwi_login}/payments",
                                        params={"rows": 1, "operation": "IN"})
            check_profile = request.get(
                f"https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true")
            check_balance = request.get(f"https://edge.qiwi.com/funding-sources/v2/persons/{qiwi_login}/accounts")
            try:
                if check_history.status_code == 200 and check_profile.status_code == 200 and check_balance.status_code == 200:
                    update_paymentx(qiwi_login=qiwi_login, qiwi_token=qiwi_token,
                                    qiwi_private_key=qiwi_private_key)
                    await delete_msg.delete()
                    await message.answer("<b>ü•ù QIWI —Ç–æ–∫–µ–Ω –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω ‚úÖ</b>",
                                         reply_markup=payment_default())
                elif check_history.status_code == 400 or check_profile.status_code == 400 or check_balance.status_code == 400:
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –ö–æ–¥ –æ—à–∏–±–∫–∏: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</code>",
                                         reply_markup=payment_default())
                elif check_history.status_code == 401 or check_profile.status_code == 401 or check_balance.status_code == 401:
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –ö–æ–¥ –æ—à–∏–±–∫–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ API</code>",
                                         reply_markup=payment_default())
                elif check_history.status_code == 403 or check_profile.status_code == 403 or check_balance.status_code == 403:
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É —Ç–æ–∫–µ–Ω–∞ API)</code>",
                                         reply_markup=payment_default())
                else:
                    if check_history.status_code != 200:
                        status_coude = check_history.status_code
                    elif check_profile.status_code != 200:
                        status_coude = check_profile.status_code
                    elif check_balance.status_code != 200:
                        status_coude = check_balance.status_code
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –ö–æ–¥ –æ—à–∏–±–∫–∏: {status_coude}</code>",
                                         reply_markup=payment_default())
            except json.decoder.JSONDecodeError:
                await delete_msg.delete()
                await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                     "<code>‚ñ∂ –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</code>",
                                     reply_markup=payment_default())
        except IndexError:
            await delete_msg.delete()
            await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                 "<code>‚ñ∂ IndexError</code>",
                                 reply_markup=payment_default())
        except UnicodeEncodeError:
            await delete_msg.delete()
            await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                 "<code>‚ñ∂ –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</code>",
                                 reply_markup=payment_default())
    except json.decoder.JSONDecodeError:
        secrey_key_error = True
    except UnicodeEncodeError:
        secrey_key_error = True
    except ValueError:
        secrey_key_error = True
    except FileNotFoundError:
        secrey_key_error = True
    if secrey_key_error:
        await delete_msg.delete()
        await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                             "<code>‚ñ∂ –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á</code>\n"
                             "<u>‚ùó –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –°–ï–ö–†–ï–¢–ù–´–ô –ö–õ–Æ–ß, –∞ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π</u>\n"
                             "‚ùï –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ =",
                             reply_markup=payment_default())
    await state.finish()


###################################################################################
####################################### YOOMONEY ##################################

@dp.message_handler(IsAdmin(), text="–ò–∑–º–µ–Ω–∏—Ç—å YooMoney üñç", state="*")
async def client_id(message: types.Message):
    await message.answer("–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–π—Ç–µ API <a href='https://yoomoney.ru/myservices/new'>–∑–¥–µ—Å—å</a>\n"
                         "üì± –í–≤–µ–¥–∏—Ç–µ <b>client_id</b>")
    await StorageYooMoney.client_id.set()


@dp.message_handler(state=StorageYooMoney.client_id)
async def redirect_uri(message: types.Message, state: FSMContext):
    id = message.text

    await state.update_data(client_id=id)
    await StorageYooMoney.next()
    await message.answer("üåê –í–≤–µ–¥–∏—Ç–µ <b>redirect_uri</b>")


@dp.message_handler(state=StorageYooMoney.redirect_uri)
async def authorize_url(message: types.Message, state: FSMContext):
    uri = message.text

    await state.update_data(redirect_uri=uri)
    data = await state.get_data()

    auth_url = yoomoney_auth(data['client_id'], uri)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="üíª –ê–∫—Ç–∏–≤–∞—Ü–∏—è", url=auth_url))

    await message.answer("‚ùóÔ∏è –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ "
                         "–ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏\n "
                         "‚ùóÔ∏è –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—É—á–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–∏ <b>1 –º–∏–Ω—É—Ç–∞</b>",
                         reply_markup=keyboard)
    await StorageYooMoney.next()


@dp.message_handler(state=StorageYooMoney.authorize)
async def authorize_payment(message: types.Message, state: FSMContext):
    url = message.text

    data = await state.get_data()

    access_token = generate_token(data['client_id'], data['redirect_uri'], url)

    if access_token is not None:
        # —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ
        num = access_token.split(".")[0]
        await state.update_data(num=num)
        await state.update_data(token=access_token)

        yoomoney_data = await state.get_data()
        edit_yoomoney(yoomoney_data)

        message_text = "‚úÖ –ö–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω–µ–Ω"
    else:
        message_text = "‚ùóÔ∏è –ö–æ—à–µ–ª–µ–∫ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–Ω–æ–≤–∞"
    await message.answer(message_text)
    # await message.answer(message_text, reply_markup=get_keyboard_for_finish(message.chat.id))

    await state.finish()

###################################################################################
####################################### CRYSTAL PAY ##################################

@dp.message_handler(IsAdmin(), text="–ò–∑–º–µ–Ω–∏—Ç—å CrystalPay üñç", state="*")
async def client_id(message: types.Message):
    await message.answer(""
                         "–í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>")
    await StorageCrystalPay.name.set()


@dp.message_handler(state=StorageCrystalPay.name)
async def name(message: types.Message, state: FSMContext):
    name = message.text

    await state.update_data(name=name)
    await StorageCrystalPay.next()
    await message.answer("üåê –í–≤–µ–¥–∏—Ç–µ <b>secret token</b>")


@dp.message_handler(state=StorageCrystalPay.secret)
async def secret(message: types.Message, state: FSMContext):
    secret = message.text

    await state.update_data(secret=secret)

    crystal_data = await state.get_data()
    edit_crystal(crystal_data)
    await message.answer('‚úÖ –ö–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω–µ–Ω')
    await state.finish()


