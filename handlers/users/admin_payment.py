# - *- coding: utf- 8 - *-
import asyncio
import json
from itertools import cycle

import requests
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery
from pyqiwip2p import QiwiP2P

from filters import IsAdmin
from keyboards.default import payment_default
from keyboards.inline import choice_way_input_payment_func
from loader import dp, bot
from states import StorageQiwi
from utils import send_all_admin, clear_firstname
from utils.db_api.sqlite import get_paymentx, update_paymentx, add_qiwi_payment, get_qiwi_paymentx, delete_qiwi_wallet
from utils.other_func import validation, withdraw


###################################################################################
########################### –í–ö–õ–Æ–ß–ï–ù–ò–ï/–í–´–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø #######################
# –í–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üî¥ –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def turn_off_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(status="False")
    await message.answer("<b>üî¥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üî¥ –í—ã–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


# –í—ã–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.message_handler(IsAdmin(), text="üü¢ –í–∫–ª—é—á–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", state="*")
async def turn_on_refill(message: types.Message, state: FSMContext):
    await state.finish()
    update_paymentx(status="True")
    await message.answer("<b>üü¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ –±—ã–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã.</b>",
                         reply_markup=payment_default())
    await send_all_admin(
        f"üë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä <a href='tg://user?id={message.from_user.id}'>{clear_firstname(message.from_user.first_name)}</a>\n"
        "üü¢ –í–∫–ª—é—á–∏–ª –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –±–æ—Ç–µ.", not_me=message.from_user.id)


###################################################################################
############################# –í–´–ë–û–† –°–ü–û–°–û–ë–ê –ü–û–ü–û–õ–ù–ï–ù–ò–Ø ############################
# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@dp.callback_query_handler(IsAdmin(), text_startswith="change_payment:")
async def input_amount(call: CallbackQuery):
    way_pay = call.data[15:]
    change_pass = False
    get_payment = get_paymentx()
    if way_pay == "nickname":
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + get_payment[1]
            get_nickname = request.get(f"https://edge.qiwi.com/qw-nicknames/v1/persons/{get_payment[0]}/nickname")
            check_nickname = json.loads(get_nickname.text).get("nickname")
            if check_nickname is None:
                await call.answer("‚ùó –ù–∞ –∞–∫–∫–∞—É–Ω—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç QIWI –ù–∏–∫–Ω–µ–π–º")
            else:
                update_paymentx(qiwi_nickname=check_nickname)
                change_pass = True
        except json.decoder.JSONDecodeError:
            await call.answer("‚ùó QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.\n‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ", True)
    else:
        change_pass = True
    if change_pass:
        update_paymentx(way_payment=way_pay)
        await bot.edit_message_text("ü•ù –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ\n"
                                    "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                    "üî∏ <a href='https://vk.cc/bYjKGM'><b>–ü–æ —Ñ–æ—Ä–º–µ</b></a> - <code>–ì–æ—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã QIWI</code>\n"
                                    "üî∏ <a href='https://vk.cc/bYjKEy'><b>–ü–æ –Ω–æ–º–µ—Ä—É</b></a> - <code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n"
                                    "üî∏ <a href='https://vk.cc/bYjKJk'><b>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</b></a> - "
                                    "<code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)</code>",
                                    call.from_user.id,
                                    call.message.message_id,
                                    reply_markup=choice_way_input_payment_func())


###################################################################################
####################################### QIWI ######################################
# –ò–∑–º–µ–Ω–µ–Ω–∏–µ QIWI –∫–æ—à–µ–ª—å–∫–∞
@dp.message_handler(IsAdmin(), text="ü•ù –î–æ–±–∞–≤–∏—Ç—å QIWI 2", state="*")
async def change_qiwi_login(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>–ª–æ–≥–∏–Ω(–Ω–æ–º–µ—Ä)</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞ 2Ô∏è‚É£</b>")
    await StorageQiwi.here_input_qiwi_login.set()

@dp.message_handler(IsAdmin(), text="ü•ù –î–æ–±–∞–≤–∏—Ç—å QIWI 1", state="*")
async def change_qiwi_login1(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>–ª–æ–≥–∏–Ω(–Ω–æ–º–µ—Ä)</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞ 1Ô∏è</b>")
    await state.set_state("here_qiwi1_input")


@dp.message_handler(IsAdmin(), state="here_qiwi1_input")
async def change_qiwi__login1(message: types.Message, state: FSMContext):
    number = str(message.text)
    await message.answer(f"QIWI –∫–æ—à–µ–ª—å–∫–∞ 1Ô∏è {number} –¥–æ–±–∞–≤–ª–µ–Ω")
    add_qiwi_payment(qiwi_login=number, qiwi_token='',
                     qiwi_private_key='', type='1')
    await state.finish()
# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ QIWI
@dp.message_handler(IsAdmin(), text="ü•ù –ü—Ä–æ–≤–µ—Ä–∏—Ç—å QIWI ‚ôª", state="*")
async def check_qiwi(message: types.Message, state: FSMContext):
    await state.finish()
    get_payments = get_paymentx()
    check_pass = True
    if get_payments[0] != "None" or get_payments[1] != "None" or get_payments[2] != "None":
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + get_payments[1]
            response_qiwi = request.get(f"https://edge.qiwi.com/payment-history/v2/persons/{get_payments[0]}/payments",
                                        params={"rows": 1, "operation": "IN"})
            if response_qiwi.status_code == 200:
                try:
                    qiwi = QiwiP2P(get_payments[2])
                    bill = qiwi.bill(amount=1, lifetime=1)
                except json.decoder.JSONDecodeError:
                    check_pass = False
            else:
                check_pass = False
        except json.decoder.JSONDecodeError:
            check_pass = False
        if check_pass:
            await message.answer(f"<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç ‚úÖ</b>\n"
                                 f"üë§ –õ–æ–≥–∏–Ω: <code>{get_payments[0]}</code>\n"
                                 f"‚ôª –¢–æ–∫–µ–Ω: <code>{get_payments[1]}</code>\n"
                                 f"üìç –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: <code>{get_payments[2]}</code>")
        else:
            await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ –ø—Ä–æ—à—ë–ª –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                 "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ ‚ùó")
    else:
        await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</b>\n"
                             "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ‚ùó")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å Qiwi"
@dp.message_handler(IsAdmin(), text="ü•ù –ë–∞–ª–∞–Ω—Å QIWI üëÅ", state="*")
async def balance_qiwi(message: types.Message, state: FSMContext):
    await state.finish()
    get_payments = get_paymentx()
    if get_payments[0] != "None" or get_payments[1] != "None" or get_payments[2] != "None":
        request = requests.Session()
        request.headers["authorization"] = "Bearer " + get_payments[1]
        response_qiwi = request.get(f"https://edge.qiwi.com/funding-sources/v2/persons/{get_payments[0]}/accounts")
        if response_qiwi.status_code == 200:
            get_balance = response_qiwi.json()["accounts"][0]["balance"]["amount"]
            await message.answer(
                f"<b>ü•ù –ë–∞–ª–∞–Ω—Å QIWI –∫–æ—à–µ–ª—å–∫–∞</b> <code>{get_payments[0]}</code> <b>—Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç:</b> <code>{get_balance} —Ä—É–±</code>")
        else:
            await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚ùå</b>\n"
                                 "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ ‚ùó")
    else:
        await message.answer("<b>ü•ù QIWI –∫–æ—à–µ–ª—ë–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚ùå</b>\n"
                             "‚ùó –ö–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –µ–≥–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ‚ùó")


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_login)
async def change_key_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_qiwi_login"] = message.text
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>—Ç–æ–∫–µ–Ω API</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞ üñç</b>\n"
                         "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>\n"
                         "‚ùï –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞, —Å—Ç–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –≥–∞–ª–æ—á–∫–∏.",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_qiwi_token.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∫–∏–≤–∏
@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_token)
async def change_secret_api(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["here_input_qiwi_token"] = message.text
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á üñç</code>\n"
                         "‚ùï –ü–æ–ª—É—á–∏—Ç—å –º–æ–∂–Ω–æ —Ç—É—Ç üëâ <a href='https://qiwi.com/p2p-admin/transfers/api'><b>–ù–∞–∂–º–∏ –Ω–∞ –º–µ–Ω—è</b></a>",
                         disable_web_page_preview=True)
    await StorageQiwi.here_input_qiwi_secret.set()


# –ü—Ä–∏–Ω—è—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –¥–ª—è –∫–∏–≤–∏
# @dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_secret)
# async def change_secret_api(message: types.Message, state: FSMContext):
#     async with state.proxy() as data:
#         data["here_input_qiwi_secret"] = message.text
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø qiwi:\n"
#                          "<b>1 - –û—Å–Ω–æ–≤–Ω–æ–π(–≤—ã–≤–æ–¥)</b>\n"
#                          "<b>2 - –í—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω—ã–π(–ø—Ä–∏–µ–º)</b>\n"
#                          "–ù–∞–ø–∏—à–∏—Ç–µ —Ü–∏—Ñ—Ä—É.",
#                          disable_web_page_preview=True)
#     await StorageQiwi.here_input_qiwi_type.set()


@dp.message_handler(IsAdmin(), state=StorageQiwi.here_input_qiwi_secret)
async def change_secret_api(message: types.Message, state: FSMContext):
    qiwi_private_key = message.text
    secrey_key_error = False
    async with state.proxy() as data:
        qiwi_login = data["here_input_qiwi_login"]
        qiwi_token = data["here_input_qiwi_token"]
    delete_msg = await message.answer("<b>ü•ù –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö QIWI –¥–∞–Ω–Ω—ã—Ö... üîÑ</b>")
    await asyncio.sleep(0.5)
    try:
        qiwi = QiwiP2P(qiwi_private_key)
        bill = qiwi.bill(amount=1, lifetime=1)
        try:
            request = requests.Session()
            request.headers["authorization"] = "Bearer " + qiwi_token
            check_history = request.get(f"https://edge.qiwi.com/payment-history/v2/persons/{qiwi_login}/payments",
                                        params={"rows": 1, "operation": "IN"})
            check_profile = request.get(
                f"https://edge.qiwi.com/person-profile/v1/profile/current?authInfoEnabled=true&contractInfoEnabled=true&userInfoEnabled=true")
            check_balance = request.get(f"https://edge.qiwi.com/funding-sources/v2/persons/{qiwi_login}/accounts")
            try:
                if check_history.status_code == 200 and check_profile.status_code == 200 and check_balance.status_code == 200:

                    # update_paymentx(qiwi_login=qiwi_login, qiwi_token=qiwi_token,
                    #                 qiwi_private_key=qiwi_private_key)
                    add_qiwi_payment(qiwi_login=qiwi_login, qiwi_token=qiwi_token,
                                     qiwi_private_key=qiwi_private_key, type='2')
                    await delete_msg.delete()
                    await message.answer("<b>ü•ù –û—Å–Ω–æ–≤–Ω–æ–π QIWI –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ</b>",
                                         reply_markup=payment_default())
                    payments = get_paymentx()
                    if payments[0] == 'None':
                        update_paymentx(qiwi_login=qiwi_login, qiwi_token=qiwi_token,
                                        qiwi_private_key=qiwi_private_key, type='2')

                elif check_history.status_code == 400 or check_profile.status_code == 400 or check_balance.status_code == 400:
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –ö–æ–¥ –æ—à–∏–±–∫–∏: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ</code>",
                                         reply_markup=payment_default())
                elif check_history.status_code == 401 or check_profile.status_code == 401 or check_balance.status_code == 401:
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –ö–æ–¥ –æ—à–∏–±–∫–∏: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–∫–µ–Ω–∞ API</code>",
                                         reply_markup=payment_default())
                elif check_history.status_code == 403 or check_profile.status_code == 403 or check_balance.status_code == 403:
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —É —Ç–æ–∫–µ–Ω–∞ API)</code>",
                                         reply_markup=payment_default())
                else:
                    if check_history.status_code != 200:
                        status_coude = check_history.status_code
                    elif check_profile.status_code != 200:
                        status_coude = check_profile.status_code
                    elif check_balance.status_code != 200:
                        status_coude = check_balance.status_code
                    await delete_msg.delete()
                    await message.answer(f"<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                         f"<code>‚ñ∂ –ö–æ–¥ –æ—à–∏–±–∫–∏: {status_coude}</code>",
                                         reply_markup=payment_default())
            except json.decoder.JSONDecodeError:
                await delete_msg.delete()
                await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                     "<code>‚ñ∂ –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</code>",
                                     reply_markup=payment_default())
        except IndexError:
            await delete_msg.delete()
            await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                 "<code>‚ñ∂ IndexError</code>",
                                 reply_markup=payment_default())
        except UnicodeEncodeError:
            await delete_msg.delete()
            await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                                 "<code>‚ñ∂ –¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω</code>",
                                 reply_markup=payment_default())
    except json.decoder.JSONDecodeError:
        secrey_key_error = True
    except UnicodeEncodeError:
        secrey_key_error = True
    except ValueError:
        secrey_key_error = True
    except FileNotFoundError:
        secrey_key_error = True
    if secrey_key_error:
        await delete_msg.delete()
        await message.answer("<b>ü•ù –í–≤–µ–¥—ë–Ω–Ω—ã–µ QIWI –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É ‚ùå</b>\n"
                             "<code>‚ñ∂ –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á</code>\n"
                             "<u>‚ùó –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –°–ï–ö–†–ï–¢–ù–´–ô –ö–õ–Æ–ß, –∞ –Ω–µ –ø—É–±–ª–∏—á–Ω—ã–π</u>\n"
                             "‚ùï –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ =",
                             reply_markup=payment_default())
    await state.finish()


@dp.message_handler(IsAdmin(), text="–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—à–µ–ª—å–∫–æ–≤", state="*")
async def check_wallets(message: types.Message, state: FSMContext):
    await state.finish()
    all_qiwi = get_qiwi_paymentx()
    print(all_qiwi)
    text = ''
    for qiwi_wallet in all_qiwi:
        check, balance = validation(qiwi_wallet)
        if qiwi_wallet[3] == '1':
            wallet_text = '1Ô∏è‚É£ ' + qiwi_wallet[0] + f' {balance}‚ÇΩ '
        else:
            wallet_text = '2Ô∏è‚É£ ' + qiwi_wallet[0] + f' {balance}‚ÇΩ '
        if check:
            text += wallet_text + ' ‚úÖ\n'
        else:
            text += wallet_text + ' ‚ùå\n'
    await message.answer(text,
                         reply_markup=payment_default())


@dp.message_handler(IsAdmin(), text="–í—ã–≤–æ–¥", state="*")
async def withdraw_balance(message: types.Message, state: FSMContext):
    await state.finish()
    all_qiwi = get_qiwi_paymentx()
    main_qiwi_list = [wallet[0] for wallet in all_qiwi if wallet[3] == '1']
    second_qiwi_list = [(wallet[0], wallet[1]) for wallet in all_qiwi if wallet[3] == '2']
    if len(main_qiwi_list) == 0:
        await message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
    elif len(second_qiwi_list) == 0:
        await message.answer("–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –≤—Ç–æ—Ä–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
    else:
        text = withdraw(cycle(main_qiwi_list), second_qiwi_list)
        await message.answer(text)


@dp.message_handler(IsAdmin(), text="–£–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫", state="*")
async def delete_wallet(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("<b>ü•ù –í–≤–µ–¥–∏—Ç–µ</b> <code>–ª–æ–≥–∏–Ω(–Ω–æ–º–µ—Ä)</code> <b>QIWI –∫–æ—à–µ–ª—å–∫–∞üñç </b>")
    await state.set_state("delete_wallet")


@dp.message_handler(IsAdmin(), state="delete_wallet")
async def change_key_api(message: types.Message, state: FSMContext):
    wallet_login = str(message.text)
    delete_qiwi_wallet(qiwi_login=wallet_login)
    await message.answer(f"{wallet_login} –£–¥–∞–ª–µ–Ω.")
